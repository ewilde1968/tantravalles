extends layout

block content
  script.
    var map = {tile:new Array(),
               width:#{game.maps[0].width},
               height:#{game.maps[0].height}},
        gameState = '#{game.state}';

  #overworld
    each tile, i in game.maps[0].tiles
      - var x = (i%game.maps[0].width)*16;
      - var y = Math.floor(i/game.maps[0].width)*16;
      - var s = 'left:' + x + 'px;top:' + y + 'px;background-position:' + tile.spriteIndex;
      img.mapTile(style=s)
      if tile.encounter
        script.
          var tileObj = {terrain:#{tile.terrain},
                         enchanted:#{tile.enchanted},
                         paths:#{tile.paths},
                         encounter:'#{tile.encounter}'
                         };
      else
        script.
          var tileObj = {terrain:#{tile.terrain},
                         enchanted:#{tile.enchanted},
                         paths:#{tile.paths}
                         };
  #textOverlay
    fieldset

  script.
    $(document).ready( function() {
        var populateForm = function(stateData) {
            var fs = $('#textOverlay fieldset');
            fs.empty();
          
            switch( gameState) {
                case "placecharacters":
                    var selectElem = $('<select></select>').attr('name','startlocation')
                                                           .attr('id','startlocation');

                    if( !!stateData === false || !!stateData.homes === false)
                        throw("invalid state data, populateform placecharacters");
                        
                    stateData.homes.forEach( function(h) {
                        selectElem.append( $('<option></option>').val(h).text(h));
                    });
                    
                    fs.append( $('<label></label>').attr('for','startlocation').text('Choose starting location'))
                        .append( selectElem)
                        .append( $('<button></button>').text('Go').click( function() {
                            emit({startlocation:$('#startlocation').val()});
                        }));
                    break;
                    
                case "birdsong":
                    stateData.characters.forEach( function(c) {
                        var innerDiv = $('<div></div>').attr('id',c.name);
                        innerDiv.append( $('<p></p>').text(c.name));
                        destinationMap(innerDiv,c,stateData.tileIndex,4);
                        innerDiv.append( $('<button></button>').addClass('anotherscreenbutton').text('Magic'))
                                .append( $('<label></label>').attr('for','hidden').text('Stay Hidden'))
                                .append( $('<input></input>').attr('type','checkbox').attr('name','hidden'))
                                .append( $('<label></label>').attr('for','activesearch').text('Active Search'))
                                .append( $('<input></input>').attr('type','checkbox').attr('name','activesearch'))
                                .append( $('<label></label>').attr('for','latestart').text('Late Start'))
                                .append( $('<input></input>').attr('type','checkbox').attr('name','latestart'));
                        fs.append( innerDiv);
                    });
                    
                    fs.append( $('<button></button>').text('Go').click( function() {
                        var emitData = {};
                        stateData.characters.forEach( function(c) {
                            var innerDiv = $('#' + c.name);
                            emitData[c.name] = {hidden:$('#' + c.name + ' input[name="hidden"]').is(':checked'),
                                                activesearch:$('#' + c.name + ' input[name="activesearch"]').is(':checked'),
                                                latestart:$('#' + c.name + ' input[name="latestart"]').is(':checked')
                                                };
                        });
                        emit(emitData);
                    }));
                    break;
                    
                default:
                    break;
            }
        };
        
        var destinationMap = function(parentDiv,c,tileIndex,maxMove) {
            parentDiv.append( $('<p></p>').addClass('instructions').text('Whence do you travel and how so?'));
            var row = Math.floor(tileIndex/map.width);
            var col = tileIndex%map.width;
            var startRow = row - maxMove;
            if( startRow < 0) startRow = 0;
            var endRow = row+maxMove;
            if( endRow >= map.height) endRow = map.height - 1;
            var startCol = col - maxMove;
            if( startCol < 0) startCol = 0;
            var endCol = col+maxMove;
            if( endCol >= map.width) endCol = map.width - 1;
        };

        var emit = function(emitData) {
            emitData.gameid = '#{game.id}';
            socket.emit(gameState, emitData, function(data) {
                if( !!data.state)
                    gameState = data.state;
                
                populateForm(data);
            });
        };
        
        //var socket = io.connect('http://10.0.1.10');
        var socket = io.connect('http://localhost');
        socket.on('connected', function() {
            emit({});
        });
    });